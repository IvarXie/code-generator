package ${mapperPackage};

import java.util.List;

import ${modelPackage}.${beanName};
import ${queryPackage}.${beanName}Query;

import com.baj.common.util.StringUtil;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

/**
 * <p>
 * 
 *
 *
 * </p>
 * 
 * @author ${author}
 * @date ${dateTime}
 * @version
 */
@Component
public class ${beanName}ManagerImpl implements ${beanName}Manager {


@Autowired
private ${beanName}Dao ${lowerCaseBeanName}Dao;

@Override
public Long insert(${beanName}DO ${lowerCaseBeanName}DO) {
if(${lowerCaseBeanName}DO==null){
return 0L;
}
return ${lowerCaseBeanName}Dao.insert(${lowerCaseBeanName}DO);
}

@Override
public Integer updateById(${beanName}DO ${lowerCaseBeanName}DO) {
if(${lowerCaseBeanName}DO==null){
return 0;
}
return ${lowerCaseBeanName}Dao.updateById(${lowerCaseBeanName}DO);
}

@Override
public ${beanName}DO queryById(Long id) {
return ${lowerCaseBeanName}Dao.queryById(id);
}

@Override
public List<${beanName}DO> queryNoPage(${beanName}Query query, Integer pageSize)  {
if (null == query) {
return Collections.emptyList();
}
if (null == pageSize || 0 >= pageSize) {
return Collections.emptyList();
}
query.setCurPage(1);
query.setTotalNum(pageSize);
query.setPageSize(pageSize);
return ${lowerCaseBeanName}Dao.query(query);
}

@Override
public List<${beanName}DO> queryNoPage(${beanName}Query query)  {
if (null == query) {
return Collections.emptyList();
}
return ${lowerCaseBeanName}Dao.query(query);
}

@Override
public List<${beanName}DO> query(${beanName}Query query) {
if (null == query) {
return Collections.emptyList();
}
Integer totalNum = ${lowerCaseBeanName}Dao.count(query);
if (null == totalNum || 0 >= totalNum) {
return Collections.emptyList();
}
query.setTotalNum(totalNum);
query.setLimit(true);
return ${lowerCaseBeanName}Dao.query(query);
}


@Override
public Integer deleteById(Long id) {
return ${lowerCaseBeanName}Dao.deleteById(id);
}

@Override
public List<${beanName}DO> queryByIds(List<Long> ids) {
if(CollectionUtils.isEmpty(ids)){
return Lists.newArrayList();
}
return ${lowerCaseBeanName}Dao.queryByIds(ids);
}

@Override
public Integer batchUpdateById(List<${beanName}DO> list) {
if(CollectionUtils.isEmpty(list)){
return 0;
}
return ${lowerCaseBeanName}Dao.batchUpdateById(list);
}

@Override
public void batchInsert(List<${beanName}DO> list) {
if(CollectionUtils.isEmpty(list)){
return;
}
${lowerCaseBeanName}Dao.batchInsert(list);
}

@Override
public Integer count(${beanName}Query query) {
if(query==null){
return 0;
}
return ${lowerCaseBeanName}Dao.count(query);
}

}